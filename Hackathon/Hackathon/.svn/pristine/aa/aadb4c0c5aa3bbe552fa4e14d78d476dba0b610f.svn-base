package com.yoero.casual.guess.scratch.off.quiz;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;

import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserFactory;

import android.app.Activity;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.graphics.Typeface;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.os.Handler;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;

import com.yoero.casual.guess.scratch.off.quiz.data.LevelData;
import com.yoero.casual.guess.scratch.off.quiz.data.ThingData;

public class ChooseActivity extends Activity implements OnClickListener, OnItemClickListener {

	public static final String TAG = "ScratchQuiz";
	public static final String CATEGORIES_URL = "categories.xml";
	public final static int PARSIONG_ERROR = 1;
	
	private final static int DLG_LODING_CATEGORIES = 1;
	
	public static final int REQUEST_SUB_MENU = 1;
	
	private Typeface customFont;
	private ArrayList<LevelData> levels;
	
	private LayoutInflater mInflater;
	
	private ListView lvLevel; 
	private LevelArrayAdapter mListAdapter;
	private Handler mHandler = new Handler();
	
	private int nImageIndex = 0;
	private Drawable[] categoryImages;
	private boolean[] bCompleted;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		MyActivityMng.add(MyActivityMng.CHOOSE_ACTIVITY, this);
		
		setContentView(R.layout.choose);
		
		MainApplication mainApp = (MainApplication)getApplication();
		customFont = mainApp.customFont;

		levels = new ArrayList<LevelData>();

		showDialog(DLG_LODING_CATEGORIES);
		startCategoryParsing();
	}
	
	@Override
	protected void onDestroy() {
		super.onDestroy();
		
		for (int i = 0; i < levels.size(); i++)
			categoryImages[i] = null;
		
		MyActivityMng.remove(MyActivityMng.CHOOSE_ACTIVITY);
	}
	
	@Override
	protected Dialog onCreateDialog(int id) {
		switch(id) {
		case DLG_LODING_CATEGORIES:
			ProgressDialog progressDialog = new ProgressDialog(this);
			progressDialog.setProgress(ProgressDialog.STYLE_HORIZONTAL);
			progressDialog.setMessage("Loading categories...");
			progressDialog.setCancelable(false);
			return progressDialog;
		}
		return null;
	}
	
	private void initLayout() {
		mInflater = getLayoutInflater();
		
		ImageButton btnBack = (ImageButton)findViewById(R.id.btnBack);
		btnBack.setOnClickListener(this);
		ImageButton btnRate = (ImageButton)findViewById(R.id.btnRate);
		btnRate.setOnClickListener(this);
		
		if (levels.size() > 0) {
			categoryImages = new Drawable[levels.size()];
			bCompleted = new boolean[levels.size()];
			checkComplete();
		}
		
		lvLevel = (ListView)findViewById(R.id.lvLevel);
		mListAdapter = new LevelArrayAdapter(this, levels);
		lvLevel.setAdapter(mListAdapter);
		lvLevel.setOnItemClickListener(this);
	}
	
	private void startCategoryParsing() {
		new Thread(new Runnable() {
			@Override
			public void run() {
				downloadCategories();
			}
		}).start();
	}
	
	private void startImageListParsing() {
		new Thread(new Runnable() {
			@Override
			public void run() {
				downloadImageList();
			}
		}).start();
	}
	
	private void downloadCategories() {
		try{
			InputStream is = getApplication().getAssets().open(CATEGORIES_URL);
			
			XmlPullParserFactory parserCreator = XmlPullParserFactory.newInstance();
			XmlPullParser parser = parserCreator.newPullParser();
			
			parser.setInput(is, null );
			int parserEvent = parser.getEventType();
			LevelData category = null; 
			String tag = null;
			while (parserEvent != XmlPullParser.END_DOCUMENT ){
				switch(parserEvent){
					case XmlPullParser.START_TAG:
						tag = parser.getName();
						if (tag.equals("category"))
							category = new LevelData();
						break;
					case XmlPullParser.END_TAG:
						tag = parser.getName();
						if (tag.equals("category")) {
							levels.add(category);
							//MainApplication.dbHelper.addCategory(category);
						}
						tag = null;
						break;

					case XmlPullParser.TEXT:
						if(tag == null)
							break;

						if (tag.equals("id"))
							category.setId(Integer.valueOf(parser.getText()));
						else if (tag.equals("filename"))
							category.setFilename(parser.getText());
						else if (tag.equals("name"))
							category.setLevel(parser.getText());
						else if (tag.equals("imagesUrl")) {
							String imageurl = parser.getText();
							if (imageurl.startsWith("http"))
								category.setImageUrl(imageurl);
							else if (imageurl.startsWith("/http"))
								category.setImageUrl(imageurl.substring(1));
							else if (imageurl.startsWith("/"))
								category.setImageUrl(imageurl.substring(1));
							else
								category.setImageUrl(imageurl);
						}
						else if (tag.equals("version"))
							category.setVersion(parser.getText());
						break;
				}
				parserEvent = parser.next();	
			}
			startImageListParsing();
		}catch(Exception e){
			removeDialog(DLG_LODING_CATEGORIES);
			setResult(PARSIONG_ERROR);
			finish();
		}

	}
	
	private void downloadImageList() {
		nImageIndex = 0;
		
		for (int i = 0; i < levels.size(); i++) {
			int id = levels.get(i).getId();

			LevelData category = MainApplication.dbHelper.getLevelById(id);
			if (category == null) {
				MainApplication.dbHelper.addCategory(levels.get(i));
			} else {
				String oldVersion = category.getVersion();
				String newVersion = levels.get(i).getVersion();
				if (oldVersion != null && newVersion != null && oldVersion.equals(newVersion))
					continue;
				else {
					MainApplication.dbHelper.deleteLevelById(id);
					MainApplication.dbHelper.deleteThingsById(id);
					MainApplication.dbHelper.addCategory(levels.get(i));
				}
			}

			try{
				InputStream is = getApplication().getAssets().open(levels.get(i).getImageUrl());
				XmlPullParserFactory parserCreator = XmlPullParserFactory.newInstance();
				XmlPullParser parser = parserCreator.newPullParser();
				
				parser.setInput(is, null );
				int parserEvent = parser.getEventType();
				ThingData image = null; 
				String tag = null;
				while (parserEvent != XmlPullParser.END_DOCUMENT ){
					switch(parserEvent){
						case XmlPullParser.START_TAG:
							tag = parser.getName();
							if (tag.equals("image")) {
								image = new ThingData();
								image.setId(nImageIndex);
								image.setLevelId(id);
								nImageIndex ++;
							}
							break;
						case XmlPullParser.END_TAG:
							tag = parser.getName();
							if (tag.equals("image")) {
								MainApplication.dbHelper.addImage(image);
							}
							tag = null;
							break;
	
						case XmlPullParser.TEXT:
							if(tag == null)
								break;
							if (tag.equals("name"))
								image.setThing(parser.getText());
							else if (tag.equals("fileName"))
								image.setImage(parser.getText());
	
							break;
					}
					parserEvent = parser.next();	
				}
			}catch( Exception e ){
				removeDialog(DLG_LODING_CATEGORIES);
				setResult(PARSIONG_ERROR);
				finish();
			}
		}
		
		removeDialog(DLG_LODING_CATEGORIES);			
		mHandler.post(new InitLayout());
	}

	@Override
	public void onClick(View v) {
		switch(v.getId()) {
		case R.id.btnBack:
			finish();
			return;
		case R.id.btnRate:
			return;
		}
	}

	/**
	 * Level array adapter.
	 */
	class LevelArrayAdapter extends ArrayAdapter<LevelData>{

		public LevelArrayAdapter(Context context, ArrayList<LevelData> list) {
			super(context, 0, list);
		}

		public View getView(int position, View convertView, ViewGroup parent) {
			View view = mInflater.inflate(R.layout.level_item, parent, false);

			try{
				LevelData level = getItem(position);
				LinearLayout llStars = (LinearLayout)view.findViewById(R.id.llStars);
				if (level.getId() % 2 == 1)
					llStars.setBackgroundResource(R.drawable.score_item_bg2);
				else
					llStars.setBackgroundResource(R.drawable.score_item_bg1);
				
				ImageView levelImage = (ImageView)view.findViewById(R.id.levelImage);
				if (categoryImages[position] == null) {
					InputStream is;
					try {
						is = getApplication().getAssets().open("levels/" + levels.get(position).getFilename());
						categoryImages[position] = Drawable.createFromStream(is, "");
						is.close();
					} catch (IOException e) {
						e.printStackTrace();
					}					
				}
				
				levelImage.setBackgroundDrawable(categoryImages[position]);
				
				int no = position + 1;
				TextView levelText = (TextView)view.findViewById(R.id.levelText);
				levelText.setText(no + ". " + level.getLevel());
				levelText.setTypeface(customFont);
				
				int stars = MainApplication.dbHelper.getLevelStarts(level.getId());
				TextView levelStars = (TextView)view.findViewById(R.id.levelStars);
				if (bCompleted[position])
					levelStars.setText("Finished with " + level.getStars() + " of " + stars +" stars, " + level.getPoints() + " Points");
				else
					levelStars.setText("Earned " + level.getStars() + " of " + stars +" stars, " + level.getPoints() + " Points");
				levelStars.setTypeface(customFont);
				
				if (level.getPoints() > 0) {
					levelStars.setTextColor(getResources().getColor(R.color.yello_level));
				} else {
					levelStars.setTextColor(getResources().getColor(R.color.white));
				}
			}catch (IndexOutOfBoundsException e) {}

			return view;
		}
	}

	@Override
	public void onItemClick(AdapterView<?> a, View v, int position, long id) {
		LevelData level = levels.get(position);
		Intent launcher = new Intent(ChooseActivity.this, SubMenuActivity.class);
		launcher.putExtra("LEVEL_ID", level.getId());
		launcher.putExtra("LEVEL_TEXT", level.getLevel());
		launcher.putExtra("LEVEL_STARS", level.getStars());
		launcher.putExtra("LEVEL_POINTS", level.getPoints());
		startActivityForResult(launcher, REQUEST_SUB_MENU);			
	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		if (requestCode == REQUEST_SUB_MENU) {
			levels = MainApplication.dbHelper.getLevelList();
			checkComplete();
			mListAdapter = new LevelArrayAdapter(this, levels);
			lvLevel.setAdapter(mListAdapter);
		}
	}
	
	private class InitLayout extends Thread {
		@Override
		public void run() {
			levels = MainApplication.dbHelper.getLevelList();
			initLayout();
		}
   	}
	
	private void checkComplete() {
		// check all item completed... ?
		for (int i = 0; i < levels.size(); i++){
			bCompleted[i] = true;
			ArrayList<ThingData> things = MainApplication.dbHelper.getThingList(levels.get(i).getId());
			for (int j = 0; j < things.size(); j++) {
				ThingData thing = things.get(j);
				if (thing.getStars() == 0 && thing.getPoint() == 0 && thing.getMisses() == 0 && thing.getPecents() == 100) {
					bCompleted[i] = false;
					break;
				}
			}
		}
	}
}
