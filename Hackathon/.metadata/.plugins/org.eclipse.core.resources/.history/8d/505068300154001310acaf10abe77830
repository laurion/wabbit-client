package com.yoero.bingo.utils;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;

import org.andengine.entity.Entity;
import org.andengine.entity.primitive.Line;
import org.andengine.opengl.vbo.VertexBufferObjectManager;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.util.EntityUtils;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Paint.Cap;
import android.graphics.Path;
import android.graphics.RectF;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;

import com.yoero.bingo.abstracts.C;
import com.yoero.bingo.interfaces.IOnCanvasDecorate;

public class ImageUtils {
	public static Bitmap drawableToBitmap (Drawable drawable) {
	    if (drawable instanceof BitmapDrawable) {
	        return ((BitmapDrawable)drawable).getBitmap();
	    }

	    Bitmap bitmap = Bitmap.createBitmap(drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight(), Config.ARGB_8888);
	    Canvas canvas = new Canvas(bitmap); 
	    drawable.setBounds(0, 0, canvas.getWidth(), canvas.getHeight());
	    drawable.draw(canvas);

	    return bitmap;
	}
	public static Bitmap drawableToBitmap (Drawable drawable, int pWidth, int pHeight) {
	    if (drawable instanceof BitmapDrawable) {
	        return resizeBitmap(((BitmapDrawable)drawable).getBitmap(), pWidth, pHeight, true);
	    }

	    Bitmap bitmap = Bitmap.createBitmap(pWidth, pHeight, Config.ARGB_8888);
	    Canvas canvas = new Canvas(bitmap); 
	    drawable.setBounds(0, 0, canvas.getWidth(), canvas.getHeight());
	    drawable.draw(canvas);

	    return bitmap;
	}
	public static void drawBitmapToCanvas(final Canvas pCanvas, final Bitmap pBitmap){
		final Paint paint = new Paint();
		pCanvas.drawBitmap(pBitmap, 0, 0, paint);
	}
	
	public static Drawable getDrawableFromResources(final Context pContext, final int pId){
		return pContext.getResources().getDrawable(pId);
	}
	
	public static IOnCanvasDecorate getCanvasDecorateFromBitmap(final Bitmap pBitmap, final int pWidth, final int pHeight){
		return new IOnCanvasDecorate() {
			@Override
			public void onCanvasDecorate(Canvas pCanvas) {
				drawBitmapToCanvas(pCanvas, resizeBitmap(pBitmap, pWidth, pHeight, true));
			}
		};
	}
	
	public static IOnCanvasDecorate getCanvasDecorateFromResId(final Context pContext, final int pResId, final int pWidth, final int pHeight){
		return new IOnCanvasDecorate() {
			@Override
			public void onCanvasDecorate(Canvas pCanvas) {
				drawBitmapToCanvas(pCanvas, drawableToBitmap( getDrawableFromResources(pContext, pResId), pWidth, pHeight ));
			}
		};
	}
	
	/*
	 * pHeight <= pRadius
	 */
	public static IOnCanvasDecorate getWheelTriangleCanvasDecorate(final int pColor, final int pWidth, final int pHeight, final float pRadius){
		return new IOnCanvasDecorate() {
			@Override
			public void onCanvasDecorate(Canvas pCanvas) {
				Path path = new Path();
				Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);
				paint.setStyle(Paint.Style.FILL_AND_STROKE);
				paint.setStrokeWidth(3f);
				//paint.setStrokeCap(Cap.ROUND);
				paint.setColor(pColor);
				paint.setDither(true);
				
				final float degree = (float) (C.TRIANGLES_ANGLE * 180 / Math.PI);
				
				//path.moveTo(0, pHeight * 0.5f);
				path.arcTo(new RectF(-pRadius + pWidth / 2f, 3, pRadius + pWidth / 2f, pRadius * 2f), 270 - degree / 2f, degree);
				path.lineTo(pWidth / 2f, pRadius);
				
				pCanvas.drawPath(path, paint);
				//pCanvas.drawRect(0, 0, pWidth, pHeight, paint);
			}
		};
	}
	
	public static void addBorderLines(final Entity pEntity, final float pLineWidth, final int pColor, final VertexBufferObjectManager pVertextManager){
		final float width = pEntity.getWidth();
		final float height = pEntity.getHeight();
		final float lineWidthHalf = pLineWidth * 0.5f;
		
		final Line left = new Line(0 + lineWidthHalf, height, 0 + lineWidthHalf, 0, pLineWidth, pVertextManager);
		final Line top = new Line(0, height - lineWidthHalf, width, height - lineWidthHalf, pLineWidth, pVertextManager);
		final Line right = new Line(width - lineWidthHalf, height, width - lineWidthHalf, 0, pLineWidth, pVertextManager);
		final Line bottom = new Line(0, 0 + lineWidthHalf, width, 0 + lineWidthHalf, pLineWidth, pVertextManager);
		
		left.setColor(pColor);
		top.setColor(pColor);
		right.setColor(pColor);
		bottom.setColor(pColor);
		
		pEntity.attachChild(left);
		pEntity.attachChild(top);
		pEntity.attachChild(right);
		pEntity.attachChild(bottom);
	}
	
	public static Bitmap downloadBitmap(String url) throws IOException {
        HttpUriRequest request = new HttpGet(url.toString());
        HttpClient httpClient = new DefaultHttpClient();
        HttpResponse response = httpClient.execute(request);
 
        StatusLine statusLine = response.getStatusLine();
        int statusCode = statusLine.getStatusCode();
        if (statusCode == 200) {
            HttpEntity entity = response.getEntity();
            byte[] bytes = EntityUtils.toByteArray(entity);
 
            Bitmap bitmap = BitmapFactory.decodeByteArray(bytes, 0,
                    bytes.length);
            return bitmap;
        } else {
            throw new IOException("Download failed, HTTP response code "
                    + statusCode + " - " + statusLine.getReasonPhrase());
        }
    }
	
	public static Bitmap downloadBitmap2(String url){
		URL img_value = null;
		try {
			img_value = new URL(url);
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		 try {
			return BitmapFactory.decodeStream(img_value.openConnection().getInputStream());
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		 return null;
	}
	
	public static Bitmap resizeBitmap(final Bitmap pBitmap, final int pWIdth, final int pHeight, final boolean pRecycle){
		/*final Bitmap scaledBitmap = Bitmap.createBitmap(pWIdth, pHeight, Config.ARGB_8888);

		float ratioX = pWIdth / (float) pBitmap.getWidth();
		float ratioY = pHeight / (float) pBitmap.getHeight();

		Matrix scaleMatrix = new Matrix();
		scaleMatrix.setScale(ratioX, ratioY, pBitmap.getWidth() * 0.5f, pBitmap.getHeight() * 0.5f);

		Canvas canvas = new Canvas(scaledBitmap);
		canvas.setMatrix(scaleMatrix);
		canvas.drawBitmap(pBitmap, 0, 0, new Paint(Paint.FILTER_BITMAP_FLAG));
		*/
		//Bitmap result = Bitmap.createScaledBitmap(pBitmap, pWIdth, pHeight, false);
		//if(pRecycle)
		//	pBitmap.recycle();
		
		return Bitmap.createScaledBitmap(pBitmap, pWIdth, pHeight, false);
	}
	
}
